; Don't use this one.
(claim  unsafeSubtract1 (->      Nat   Nat))
(define unsafeSubtract1 (lambda (x  )
  (which-Nat
    x
    0 ; returns 0 if the result would have been negative
    (lambda (x-1) x-1)
  )
))

(claim  subtract1 (->      Nat   (Maybe Nat)))
(define subtract1 (lambda (x  )
  (which-Nat
    x
    (nothing Nat)
    (lambda (x-1) (just Nat x-1))
  )
))

(claim  + (->      Nat Nat   Nat))
(define + (lambda (a   b  )
  (iter-Nat 
    a
    b
    (lambda (result) (add1 result))
  )
))

(claim  - (->      Nat Nat   (Maybe Nat)))
(define - (lambda (a   b  )
  (iter-Nat
    b
    (just Nat a)
    (lambda (result) (Maybe.flatMap Nat Nat subtract1 result))
  )
))

(claim  * (->      Nat Nat   Nat))
(define * (lambda (a   b  )
  (iter-Nat
    a
    0
    (lambda (result) (+ b result))
  )
))
