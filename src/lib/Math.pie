(claim  ++ (->      Nat  Nat     ))
(define ++ (lambda (x  ) (add1 x)))

(claim  unsafeSubtract1 (->      Nat   Nat))
(define unsafeSubtract1 (lambda (x  )
  (which-Nat
    x
    0 ; returns 0 if the result would have been negative
    (lambda (target-1) target-1))))

(claim -- (-> Nat (Maybe Nat)))
(define -- (lambda (x)
  (which-Nat
    x
    (nothing Nat)
    (lambda (target-1) (just Nat target-1)))))

(claim  + (->      Nat Nat   Nat))
(define + (lambda (a   b  )
  (rec-Nat 
    a
    b
    (lambda (a-1 result)
      (add1 result)
    )
  )
))

(claim  * (->      Nat Nat   Nat))
(define * (lambda (a   b  )
  (rec-Nat
    a
    0
    (lambda (a-1 result)
      (+ b result)
    )
  )
))